"use strict";(self.webpackChunkarc=self.webpackChunkarc||[]).push([[9213],{5478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"manual_setup","title":"Manual Setup","description":"The Arc Framework can easily be setup with a few lines of code.","source":"@site/docs/00-manual_setup.md","sourceDirName":".","slug":"/manual_setup","permalink":"/arc/docs/manual_setup","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Manual Setup","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/arc/docs/quickstart"},"next":{"title":"AI Clients","permalink":"/arc/docs/clients/"}}');var s=t(4848),o=t(8453);const r={title:"Manual Setup",sidebar_position:2},a=void 0,c={},d=[{value:"Loading Agents",id:"loading-agents",level:3},{value:"ChatCompleterProvider",id:"chatcompleterprovider",level:4},{value:"SetBeanProvider",id:"setbeanprovider",level:4},{value:"ScriptingLLMFunctionLoader",id:"scriptingllmfunctionloader",level:4},{value:"ChatAgentFactory",id:"chatagentfactory",level:4},{value:"ScriptingAgentLoader",id:"scriptingagentloader",level:4},{value:"Hot Reloading Scripts",id:"hot-reloading-scripts",level:4},{value:"Executing Agents",id:"executing-agents",level:3},{value:"Defining Agents (without scripting)",id:"defining-agents-without-scripting",level:3},{value:"Conversations",id:"conversations",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Arc Framework can easily be setup with a few lines of code."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note: When using Spring Boot, it is recommended to use the ",(0,s.jsx)(n.a,{href:"/docs/spring",children:"Arc Spring Boot Starter"}),"\nso that all the following steps are done automatically."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"loading-agents",children:"Loading Agents"}),"\n",(0,s.jsx)(n.p,{children:"The following shows how to load Scripted Arc Agents."}),"\n",(0,s.jsxs)(n.p,{children:["(See ",(0,s.jsx)(n.a,{href:"#defining-agents-without-scripting",children:"Defining Agents (without scripting)"}),"\nfor an example of defining Agents programmatically.)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val chatCompleterProvider = ChatCompleterProvider { modelId ->\n    // Return a ChatCompleter/AIClient for the given model id.\n}\n\nval beanProvider = SetBeanProvider(setOf(chatCompleterProvider))\nval functionLoader = ScriptingLLMFunctionLoader(beanProvider, KtsFunctionScriptEngine())\nval agentFactory = ChatAgentFactory(CompositeBeanProvider(setOf(functionLoader), beanProvider))\nval agentLoader = ScriptingAgentLoader(agentFactory, KtsAgentScriptEngine())\n\nagentLoader.loadAgent("""\n  agent {\n     name = "simple-agent"\n     model = { "modelId" }\n     prompt {\n      "You are a helpful agent." \n     }\n  }\n""") \n\nval loadedAgents = agentLoader.getAgents()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"chatcompleterprovider",children:"ChatCompleterProvider"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ChatCompleterProvider"})," is a function that returns a ",(0,s.jsx)(n.code,{children:"ChatCompleter"})," for a given model id.\nThe model id comes from the ",(0,s.jsx)(n.code,{children:"model"})," field of an agent."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"ChatCompleter"})," is the interface implemented by LLM clients. See the ",(0,s.jsx)(n.a,{href:"/docs/clients",children:"Clients"})," section for more details."]}),"\n",(0,s.jsxs)(n.p,{children:["Also checkout the ",(0,s.jsx)(n.a,{href:"/docs/clients/langchain4j",children:"LangChain4J"})," client for an example of a ",(0,s.jsx)(n.code,{children:"ChatCompleterProvider"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"setbeanprovider",children:"SetBeanProvider"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SetBeanProvider"})," implements the ",(0,s.jsx)(n.code,{children:"BeanProvider"})," interface.\nA ",(0,s.jsx)(n.code,{children:"BeanProvider"})," provides the beans that are used within the Arc Agents.\nThese beans can be accessed from anywhere within the Agent DSL using the ",(0,s.jsx)(n.code,{children:"get<BeanClass>()"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["At least a ",(0,s.jsx)(n.code,{children:"ChatCompleterProvider"})," must be provided to the ",(0,s.jsx)(n.code,{children:"BeanProvider"}),".\nIt is required by the ",(0,s.jsx)(n.code,{children:"ChatAgent"})," to complete the conversation."]}),"\n",(0,s.jsxs)(n.p,{children:["Also an instance of ",(0,s.jsx)(n.code,{children:"LLMFunctionLoader"}),", in this example ",(0,s.jsx)(n.code,{children:"ScriptingLLMFunctionLoader"}),",\nshould also be provided so that the Agents have access to the functions defined in the DSL."]}),"\n",(0,s.jsx)(n.h4,{id:"scriptingllmfunctionloader",children:"ScriptingLLMFunctionLoader"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ScriptingLLMFunctionLoader"})," is an instance of ",(0,s.jsx)(n.code,{children:"LLMFunctionLoader"}),".\n",(0,s.jsx)(n.code,{children:"LLMFunctionLoader"}),"s are responsible for loading Agent functions."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ScriptingLLMFunctionLoader"})," loads functions from kotlin script files."]}),"\n",(0,s.jsx)(n.h4,{id:"chatagentfactory",children:"ChatAgentFactory"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ChatAgentFactory"})," is responsible for creating ",(0,s.jsx)(n.code,{children:"ChatAgent"})," instances from the agent DSL."]}),"\n",(0,s.jsx)(n.p,{children:"The ChatAgent is the main implementation of the Arc Agent interface."}),"\n",(0,s.jsxs)(n.p,{children:["As the name suggests, ",(0,s.jsx)(n.code,{children:"ChatAgent"}),"s are agents that conduct a conversation with the client/user.\nThey take a ",(0,s.jsx)(n.code,{children:"Conversation"})," object as input and\noutputs the ",(0,s.jsx)(n.code,{children:"Conversation"})," containing a new message.\nSee the ",(0,s.jsx)(n.a,{href:"#conversations",children:"Conversations"})," section for more details on conversations."]}),"\n",(0,s.jsx)(n.h4,{id:"scriptingagentloader",children:"ScriptingAgentLoader"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ScriptingAgentLoader"})," is an instance of ",(0,s.jsx)(n.code,{children:"AgentLoader"}),".\n",(0,s.jsx)(n.code,{children:"AgentLoader"}),"s are responsible for loading Agents."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ScriptingAgentLoader"})," loads agents from kotlin script files."]}),"\n",(0,s.jsx)(n.h4,{id:"hot-reloading-scripts",children:"Hot Reloading Scripts"}),"\n",(0,s.jsx)(n.p,{children:'A powerful and flexible way of crafting Arc Agents is to use Kotlin Scripting.\nIn this case, the Arc Agent DSL is placed in Kotlin script files that can be loaded and executed dynamically\nat runtime without restarting the application, i.e. "Hot Reloaded".'}),"\n",(0,s.jsxs)(n.p,{children:["Scripts can be loaded from any source and passed to the ",(0,s.jsx)(n.code,{children:"loadAgent"})," method as a string.\nAlternatively, Agents can be loaded from a folder and reload automatically when the files are modified."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'  \nval scriptHotReload = ScriptHotReload(\n    ScriptingAgentLoader(agentFactory, agentScriptEngine),\n    ScriptingLLMFunctionLoader(beanProvider, functionScriptEngine),\n    3.seconds, // fallback polling interval if file watcher is not supported on the platform\n)\nscriptHotReload.start(File("./agents"))\n\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note: In order for Agents Scripts to be correctly identified, their files must end with ",(0,s.jsx)(n.code,{children:".agent.kts"})," when containing Agents and\n",(0,s.jsx)(n.code,{children:".functions.kts"})," when containing Functions. This will enable an IDE, such as the IntelliJ IDE,\nto provide syntax highlighting and code completion."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Once loaded, Scripted Agents are no different from Agents loaded by other\nmechanisms."}),"\n",(0,s.jsx)(n.h3,{id:"executing-agents",children:"Executing Agents"}),"\n",(0,s.jsxs)(n.p,{children:["Once an Agent is loaded, it can be executed by passing a ",(0,s.jsx)(n.code,{children:"Conversation"})," object to the ",(0,s.jsx)(n.code,{children:"execute"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:' val agent = agentLoader.getAgentByName(agentName) as ChatAgent? ?: error("Agent not found!")\n val conversation = Conversation(User("anonymous")) + UserMessage("My question")\n val result = agent.execute(conversation).getOrNull()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"/docs/cookbook/",children:"cookbook"})," for examples of Agent Scripts."]}),"\n",(0,s.jsx)(n.h3,{id:"defining-agents-without-scripting",children:"Defining Agents (without scripting)"}),"\n",(0,s.jsx)(n.p,{children:"Loading Agent from scripting files is a great way to develop and prototype Agents."}),"\n",(0,s.jsx)(n.p,{children:"However, the Agent DSL can also be used to create Agents programmatically."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:' val context = BasicAgentDefinitionContext(agentFactory)\n with(context) {\n    agent {\n        name = "simple-agent"\n        model { "modelId" }\n        prompt {\n            "You are a helpful agent."\n        }\n    }\n\n    agent {\n        name = "simple-agent-2"\n        model { "modelId" }\n        prompt {\n            "You are a helpful agent."\n        }\n    }\n }\n\n val loadedAgents = context.agents.toList()\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"The same principle can also be used to define Agent Functions."}),"\n",(0,s.jsx)(n.h3,{id:"conversations",children:"Conversations"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Conversation"})," object represents a conversation between a client and an Arc Agent, such as a ChatAgent.\nIt contains the entire transcript of the conversation, both client and agent messages,\nplus some metadata about the conversation."]}),"\n",(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.code,{children:"Conversation"})," object must be associated with a ",(0,s.jsx)(n.code,{children:"User"})," which acts as the owner of the conversation.\nThis to prevent a conversation from being accessed by unauthorized users/clients.\nFurthermore, the ",(0,s.jsx)(n.code,{children:"User"})," id may also be used as a key to store user/client specific data."]}),"\n",(0,s.jsx)(n.p,{children:"Messages are usually be one of 2 types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"UserMessage"})," - messages sent by the user/client."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AssistantMessage"})," - messages generated by the Agent."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"SystemMessage"}),"s, messages that contain instructions for the Agent, are usually not store in the conversation\ntranscript."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);