"use strict";(self.webpackChunkarc=self.webpackChunkarc||[]).push([[285],{2880:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"clients/langchain4j","title":"LangChain4J","description":"LangChain4J is a Java library that provides a uniform interface to multiple language models.","source":"@site/docs/02-clients/langchain4j.md","sourceDirName":"02-clients","slug":"/clients/langchain4j","permalink":"/arc/docs/clients/langchain4j","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"LangChain4J"},"sidebar":"tutorialSidebar","previous":{"title":"Google Gemini","permalink":"/arc/docs/clients/gemini"},"next":{"title":"Ollama Client","permalink":"/arc/docs/clients/ollama"}}');var t=a(4848),l=a(8453);const o={title:"LangChain4J"},r=void 0,c={},s=[];function d(n){const e={code:"code",p:"p",pre:"pre",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"LangChain4J is a Java library that provides a uniform interface to multiple language models."}),"\n",(0,t.jsx)(e.p,{children:"The Arc Framework provides a wrapper for the LangChain4J ChatLanguageModel interface,\nwhich allows us to use any LangChain4J client within our Arc Agents."}),"\n",(0,t.jsx)(e.p,{children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'// Gemini\nval geminiClient = LangChainClient(\n    LangChainConfig(\n        modelName = config.modelName,\n        url = config.url,\n        accessKeyId = null,\n        secretAccessKey = null,\n        apiKey = config.apiKey,\n    ),\n    geminiBuilder(),\n    eventPublisher,\n  )\n\n// Amazon Bedrock\nval bedrockClient = LangChainClient(\n    LangChainConfig(\n        modelName = config.modelName,\n        url = config.url,\n        accessKeyId = config.accessKey,\n        secretAccessKey = config.accessSecret,\n        apiKey = null,\n    ),\n    bedrockBuilder(),\n    eventPublisher,\n)\n\n// Ollama \nval ollamaClient = LangChainClient(\n    LangChainConfig(\n        modelName = config.modelName,\n        url = config.url, // defaults to "http://localhost:11434"\n    ),\n    ollamaBuilder(),\n    eventPublisher,\n)\n\n// The clients can then be used in a ChatCompleterProvider\nval chatCompleterProvider = ChatCompleterProvider { clientId ->\n    when (clientId) {\n        "gemini" -> geminiClient\n        "bedrock" -> bedrockClient\n        "ollama" -> ollamaClient\n        else -> throw IllegalArgumentException("Unknown client id: $clientId")\n    }\n}\n\n'})})]})}function u(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>o,x:()=>r});var i=a(6540);const t={},l=i.createContext(t);function o(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);